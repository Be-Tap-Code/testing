#!/usr/bin/env python3
"""
Script ƒë·ªÉ t·∫£i dataset t·ª´ Kaggle v√† thay th·∫ø c√°c file hi·ªán t·∫°i
"""
import os
import sys
import subprocess
import shutil
from pathlib import Path

def install_kaggle():
    """C√†i ƒë·∫∑t Kaggle API"""
    print("üì¶ Installing Kaggle API...")
    try:
        subprocess.run([sys.executable, "-m", "pip", "install", "kaggle"], check=True)
        print("‚úÖ Kaggle API installed successfully!")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Failed to install Kaggle API: {e}")
        return False

def setup_kaggle_credentials():
    """H∆∞·ªõng d·∫´n setup Kaggle credentials"""
    print("\nüîë Kaggle API Setup Required:")
    print("1. Go to https://www.kaggle.com/account")
    print("2. Click 'Create New API Token' to download kaggle.json")
    print("3. Place kaggle.json in one of these locations:")
    print("   - ~/.kaggle/kaggle.json (Linux/Mac)")
    print("   - C:\\Users\\<username>\\.kaggle\\kaggle.json (Windows)")
    print("   - Or set KAGGLE_CONFIG_DIR environment variable")
    print("\n4. Set permissions: chmod 600 ~/.kaggle/kaggle.json")
    
    kaggle_dir = Path.home() / ".kaggle"
    kaggle_file = kaggle_dir / "kaggle.json"
    
    if kaggle_file.exists():
        print(f"‚úÖ Found kaggle.json at {kaggle_file}")
        return True
    else:
        print(f"‚ùå kaggle.json not found at {kaggle_file}")
        print("\nAlternatively, you can set environment variables:")
        print("export KAGGLE_USERNAME=your_username")
        print("export KAGGLE_KEY=your_api_key")
        return False

def download_dataset():
    """T·∫£i dataset t·ª´ Kaggle"""
    print("\nüì• Downloading dataset from Kaggle...")
    
    # Dataset URL: https://www.kaggle.com/code/phamhoanglenguyen/clip-concat-aic25/output
    # C·∫ßn t√¨m dataset name ch√≠nh x√°c
    dataset_name = "phamhoanglenguyen/clip-concat-aic25"
    
    try:
        # T·∫°o th∆∞ m·ª•c t·∫°m ƒë·ªÉ t·∫£i dataset
        download_dir = Path("./kaggle_download")
        download_dir.mkdir(exist_ok=True)
        
        print(f"Downloading {dataset_name}...")
        
        # Th·ª≠ t·∫£i dataset
        cmd = ["kaggle", "datasets", "download", "-d", dataset_name, "-p", str(download_dir)]
        result = subprocess.run(cmd, capture_output=True, text=True)
        
        if result.returncode != 0:
            print(f"‚ùå Failed to download dataset: {result.stderr}")
            print("Trying alternative approach...")
            
            # Th·ª≠ t·∫£i t·ª´ competition output
            cmd = ["kaggle", "competitions", "download", "-c", "clip-concat-aic25", "-p", str(download_dir)]
            result = subprocess.run(cmd, capture_output=True, text=True)
            
            if result.returncode != 0:
                print(f"‚ùå Alternative download failed: {result.stderr}")
                return False
        
        print("‚úÖ Dataset downloaded successfully!")
        return True
        
    except Exception as e:
        print(f"‚ùå Error downloading dataset: {e}")
        return False

def extract_and_replace_files():
    """Gi·∫£i n√©n v√† thay th·∫ø c√°c file"""
    print("\nüìÇ Extracting and replacing files...")
    
    download_dir = Path("./kaggle_download")
    
    if not download_dir.exists():
        print("‚ùå Download directory not found")
        return False
    
    try:
        # T√¨m file zip
        zip_files = list(download_dir.glob("*.zip"))
        if not zip_files:
            print("‚ùå No zip files found in download directory")
            return False
        
        zip_file = zip_files[0]
        print(f"üì¶ Extracting {zip_file.name}...")
        
        # Gi·∫£i n√©n
        import zipfile
        with zipfile.ZipFile(zip_file, 'r') as zip_ref:
            zip_ref.extractall(download_dir)
        
        # T√¨m v√† thay th·∫ø c√°c file c·∫ßn thi·∫øt
        files_to_replace = {
            "image_index.faiss": "image_index.faiss",
            "image_metadata.csv": "image_metadata.csv",
            "keyframe_part_0.index": "keyframe_part_0.index", 
            "keyframe_part_1.index": "keyframe_part_1.index",
            "l27.npy": "l27.npy"
        }
        
        for source_name, target_name in files_to_replace.items():
            # T√¨m file trong th∆∞ m·ª•c gi·∫£i n√©n
            source_files = list(download_dir.rglob(source_name))
            target_path = Path(target_name)
            
            if source_files:
                source_file = source_files[0]
                print(f"üìÑ Replacing {target_name}...")
                
                # Backup file c≈©
                if target_path.exists():
                    backup_path = Path(f"{target_name}.backup")
                    shutil.move(target_path, backup_path)
                    print(f"   Backed up original to {backup_path}")
                
                # Copy file m·ªõi
                shutil.copy2(source_file, target_path)
                print(f"   ‚úÖ Replaced {target_name}")
            else:
                print(f"   ‚ö†Ô∏è  {source_name} not found in downloaded files")
        
        print("‚úÖ File replacement completed!")
        return True
        
    except Exception as e:
        print(f"‚ùå Error extracting files: {e}")
        return False

def cleanup():
    """D·ªçn d·∫πp file t·∫°m"""
    print("\nüßπ Cleaning up temporary files...")
    download_dir = Path("./kaggle_download")
    if download_dir.exists():
        shutil.rmtree(download_dir)
        print("‚úÖ Cleanup completed!")

def main():
    print("üöÄ Kaggle Dataset Downloader for AIC25")
    print("=" * 50)
    
    # B∆∞·ªõc 1: C√†i ƒë·∫∑t Kaggle API
    if not install_kaggle():
        return
    
    # B∆∞·ªõc 2: Ki·ªÉm tra credentials
    if not setup_kaggle_credentials():
        print("\n‚ùå Please setup Kaggle credentials first!")
        return
    
    # B∆∞·ªõc 3: T·∫£i dataset
    if not download_dataset():
        print("\n‚ùå Failed to download dataset!")
        return
    
    # B∆∞·ªõc 4: Gi·∫£i n√©n v√† thay th·∫ø
    if not extract_and_replace_files():
        print("\n‚ùå Failed to extract and replace files!")
        return
    
    # B∆∞·ªõc 5: D·ªçn d·∫πp
    cleanup()
    
    print("\nüéâ Dataset download and replacement completed successfully!")
    print("You can now restart the backend server to use the new dataset.")

if __name__ == "__main__":
    main()
